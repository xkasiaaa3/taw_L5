{"ast":null,"code":"import { AuthService } from './auth.service';\nimport * as i0 from \"@angular/core\";\nexport class AuthInterceptor {\n  constructor(injector) {\n    this.injector = injector;\n  }\n  intercept(request, next) {\n    const auth = this.injector.get(AuthService);\n    request = request.clone({\n      setHeaders: {\n        'x-auth-token': `${auth.getToken()}`\n      }\n    });\n    return next.handle(request);\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)(i0.ɵɵinject(i0.Injector));\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AASA,SAAQA,WAAW,QAAO,gBAAgB;;AAG1C,OAAM,MAAOC,eAAe;EAE1BC,YAAoBC,QAAkB;IAAlB,aAAQ,GAARA,QAAQ;EAC5B;EAEAC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IAEpD,MAAMC,IAAI,GAAG,IAAI,CAACJ,QAAQ,CAACK,GAAG,CAACR,WAAW,CAAC;IAC3CK,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;MACtBC,UAAU,EAAE;QACV,cAAc,EAAE,GAAGH,IAAI,CAACI,QAAQ,EAAE;;KAErC,CAAC;IAEF,OAAOL,IAAI,CAACM,MAAM,CAACP,OAAO,CAAC;EAC7B;;;mBAfWJ,eAAe;AAAA;;SAAfA,eAAe;EAAAY,SAAfZ,eAAe;AAAA","names":["AuthService","AuthInterceptor","constructor","injector","intercept","request","next","auth","get","clone","setHeaders","getToken","handle","factory"],"sourceRoot":"","sources":["C:\\Users\\darek\\Downloads\\L14_TAW-master(1)\\L14_TAW-master\\blog-client\\src\\app\\services\\auth.interceptor.ts"],"sourcesContent":["import {Injectable, Injector} from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\n\nimport {Observable} from 'rxjs';\nimport {AuthService} from './auth.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(private injector: Injector) {\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    const auth = this.injector.get(AuthService);\n    request = request.clone({\n      setHeaders: {\n        'x-auth-token': `${auth.getToken()}`\n      }\n    });\n\n    return next.handle(request);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}