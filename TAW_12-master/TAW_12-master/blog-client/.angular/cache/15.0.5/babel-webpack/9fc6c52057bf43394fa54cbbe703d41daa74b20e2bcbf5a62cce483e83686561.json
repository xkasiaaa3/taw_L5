{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n    this.url = 'http://localhost:3000';\n  }\n  getAll() {\n    return this.http.get(this.url + '/api/posts/');\n  }\n  getById(id) {\n    return this.http.get(this.url + '/api/posts/' + id);\n  }\n  getByText(data) {\n    return this.http.post(this.url + '/api/posts/', data);\n  }\n  createOrUpdate(post) {\n    return this.http.post(`${this.url}/api/posts`, post);\n  }\n}\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n};\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,QAAG,GAAG,uBAAuB;EAGrC;EAEAC,MAAM;IACJ,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAC,IAAI,CAACC,GAAG,GAAG,aAAa,CAAC;EAChD;EAEAC,OAAO,CAACC,EAAiB;IACvB,OAAO,IAAI,CAACL,IAAI,CAACE,GAAG,CAAC,IAAI,CAACC,GAAG,GAAG,aAAa,GAAGE,EAAE,CAAC;EACrD;EAEAC,SAAS,CAACC,IAAS;IACjB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAC,IAAI,CAACL,GAAG,GAAG,aAAa,EAAEI,IAAI,CAAC;EACvD;EAEAE,cAAc,CAACD,IAAS;IACtB,OAAO,IAAI,CAACR,IAAI,CAACQ,IAAI,CAAC,GAAG,IAAI,CAACL,GAAG,YAAY,EAAEK,IAAI,CAAC;EACtD;;;mBArBWV,WAAW;AAAA;;SAAXA,WAAW;EAAAY,SAAXZ,WAAW;EAAAa,YAFV;AAAM","names":["DataService","constructor","http","getAll","get","url","getById","id","getByText","data","post","createOrUpdate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\darek\\Downloads\\L14_TAW-master(1)\\L14_TAW-master\\blog-client\\src\\app\\services\\data.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  private url = 'http://localhost:3000';\n\n  constructor(private http: HttpClient) {\n  }\n\n  getAll() {\n    return this.http.get(this.url + '/api/posts/');\n  }\n\n  getById(id: string | null) {\n    return this.http.get(this.url + '/api/posts/' + id);\n  }\n\n  getByText(data: any) {\n    return this.http.post(this.url + '/api/posts/', data);\n  }\n\n  createOrUpdate(post: any) {\n    return this.http.post(`${this.url}/api/posts`, post);\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}